({
    handleValidate: function (component) {
        var tell = component.get("v.customerPhone");
        const allValid = tell.reduce(function (validSoFar, inputCmp) {
            inputCmp.showHelpMessageIfInvalid();
            return validSoFar && inputCmp.get("v.validity").valid;
        }, true);
        return allValid;
    },

    scrollChatToBottom: function (component) {
        const chatArea = component.find("messageContent");
        if (chatArea) {
            chatArea.scrollTop = chatArea.scrollHeight;
        }
    },
    
    
    getCustomerNo: function(component) {
        var recrdId = component.get("v.recordId");
        console.log("Calling for get recordId from init "+ recrdId);
        var action = component.get("c.getCustomerNo");
        action.setParams({
            recordId: recrdId  
        });
        action.setCallback(this, function(response) {
            var state = response.getState();
            if (state === "SUCCESS") {
                var record = response.getReturnValue();
                component.set("v.customerPhone", record.WhatsappNumber__c);
                console.log("Calling for get customer no from init "+ record.WhatsappNumber__c);
            }
        });
        $A.enqueueAction(action);
    },
     PlatformEvent : function(component, event, helper) {
      //  var channel = '/event/Techdicer_Event__e';
        const replayId = -1;
          
        const empApi = component.find("empApi");
         
        var payload = event.getParam('payload');
        var MessageId = payload.MessageId__c;
        var CustomerPhone = payload.CustomerPhone__c;  
        
        console.log("Subscribed to MessageId " + MessageId);
        console.log("Subscribed to CustomerPhone " + CustomerPhone);
       
        //A callback function that's invoked for every event received
        const callback = function (message) {
            var obj = message.data.payload;
            console.log(obj);
            console.log("obj MessageId " + obj.MessageId__c);
            console.log("obj CustomerPhone " + obj.CustomerPhone); 

            //fire toast message
            var toastEvent = $A.get("e.force:showToast");
            toastEvent.setParams({
                "mode" : 'sticky',
                "title" : "Success",
                "message" : obj.MessageId__c,
                "type" : "success"
            });
            toastEvent.fire();
        };
         
        // Subscribe to the channel and save the returned subscription object.
        empApi.subscribe(channel, replayId, callback).then(function(newSubscription) {
            console.log("Subscribed to channel 1" + channel);
        });
         
        const errorHandler = function (message) {
            console.error("Received error ", JSON.stringify(message));
        };
         
        //A callback function that's called when an error response is received from the server for the handshake, connect, subscribe, and unsubscribe meta channels.
        empApi.onError(errorHandler);
    }
})
